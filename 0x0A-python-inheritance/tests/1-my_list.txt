Import function from module:
 >>>MyList = __import__('1-my_list').MyList

Correct Class Type test:
 >>>ml = MyList()
 >>> type(ml) == MyList
 True

Correct Instance test:
 >>> ml = MyList()
 >>> isinstance(ml, list)

print_sorted method as an instant method:
 >>> type(MyList.__dict__['print_sorted'])
 <class 'function'>

print_sorted method called via class with no arguments:
 >>> ml.__class__.print_sorted()
 Traceback (most recent call last):
 TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted with 1 argument:
 >>> ml.print_sorted([4, 2, 5])

print_sorted with 2 argument:
 >>> ml.print_sorted([4, 2, 5], 1)

Empty list test:
 >>> ml = MyList()
 >>> ml.print_sorted()
 []

Normal list test 1:
 >>> ml = MyList([2, 10, 1])
 >>>ml.print_sorted()
 [1, 2, 10]


Normal list test 2:
 >>> ml = MyList([1, 4, 2, 3, 5])
 >>>ml.print_sorted()
 [1, 2, 3, 4, 5]


Test append:
 >>> ml = MyList()
 >>> ml.append(10)
 >>> ml
 [10]


my_list = MyList([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])
my_list.print_sorted()  # This will print the sorted list in ascending order

